asio version 0.3.3 - Installation instructions

1.   Supported Platforms
2.   Requirements
3.   Before using asio
4.   Building the tests on Linux or UNIX
5.   Building the tests on Win32
5.1.   Building with MSVC
5.2.   Building with Borland C++
5.3.   Building with MinGW
5.4.   Building with MinGW and MSYS


1. Supported Platforms
======================

The asio toolkit has been tested with the following compiler/platform
combinations:

  - Redhat Linux 7.3 using gcc 2.95.3
  - Redhat Linux 7.3 using gcc 3.2.1
  - Redhat Linux 7.3 using gcc 3.4.1
  - Fedora Core release 3 running Linux 2.6 kernel using gcc 3.4.2
  - Debian Sarge running Linux 2.6 kernel using gcc 3.3.5
  - SuSE Linux Enterprise Server 8.1 on AMD64 using gcc 3.2.2
  - Microsoft Windows 2000 using MSVC 6 sp5
  - Microsoft Windows 2000 using MSVC 7.1 (Visual Studio .NET 2003)
  - Microsoft Windows 2000 using Borland C++ Builder 6 patch 4 (bcc32 5.6.4)
  - Microsoft Windows 2000 using MinGW 3.1.0-1 (gcc 3.2.3)
  - Sun Solaris 8 using gcc 2.95.3
  - Sun Solaris 9 using gcc 3.3.2
  - Mac OS X 10.4.2 using gcc 3.3


2. Requirements
===============

The asio toolkit requires Boost 1.33.0 or later. There is no need to build any
of the Boost libraries to use asio, as only the header files are required.
(Note: with MSVC you may need to add -DBOOST_DATE_TIME_NO_LIB to your project
settings to disable autolinking of the Boost.Date_Time library.)


3. Before using asio
====================

The asio toolkit consists only of header files, and so there is no need to
build any libraries before using asio in your own applications. You simply need
to add the following directories to your compiler include path:

  - asio's `include' directory
  - the boost directory (e.g. the one called boost_1_33_0)


4. Building the tests on Linux or UNIX
======================================

If the boost directory (e.g. the directory called boost_1_33_0)
is in the same directory as the asio source kit, then you may configure asio by
simply going:

  ./configure

in the root directory of the asio source kit. Note that configure will always
use the most recent boost version it knows about (i.e. 1.33.0) in preference to
earlier versions, if there is more than one version present.

If the boost directory is in some other location, then you need to specify this
directory when running configure:

  ./configure --with-boost=<BOOSTDIR>

When specifying the boost directory in this way you should ensure that you use
an absolute path.

To build, simply run `make' in the root directory of the asio source kit. To
test that asio is working correctly, run `make check' after a successful build.


5. Building the tests on Win32
==============================

5.1. Building with MSVC

To build using the MSVC 6 or 7.1 command line compiler, perform the following
steps:

  - If you are using a version of boost other than 1.33.0, or if the boost
    directory (i.e. the directory called boost_1_33_0) is not in the same
    directory as the asio source kit, then specify the location of boost by
    running a command similar to `set BOOSTDIR=path_to_boost'. Ensure that
    you specify an absolute path.

  - Change to the asio `src' directory.

  - Execute the command `nmake -f Makefile.msc'.

  - Execute the command `nmake -f Makefile.msc check' to run a suite of tests
    to confirm that asio is working correctly.

5.2. Building with Borland C++

To build using the Borland C++ Builder 6 command line compiler, perform the
following steps:

  - If you are using a version of boost other than 1.33.0, or if the boost
    directory (i.e. the directory called boost_1_33_0) is not in the same
    directory as the asio source kit, then specify the location of boost by
    running a command similar to `set BOOSTDIR=path_to_boost'. Ensure that
    you specify an absolute path.

  - Change to the asio `src' directory.

  - Execute the command `make -f Makefile.bor'.

  - Execute the command `make -f Makefile.bor check' to run a suite of tests to
    confirm that asio is working correctly.

5.3. Building with MinGW

To build using the MinGW g++ compiler from the command line, perform the
following steps:

  - If you are using a version of boost other than 1.33.0, or if the boost
    directory (i.e. the directory called boost_1_33_0) is not in the same
    directory as the asio source kit, then specify the location of boost by
    running a command similar to `set BOOSTDIR=path_to_boost'. Ensure that
    you specify an absolute path.

  - Change to the asio `src' directory.

  - Execute the command `mingw32-make -f Makefile.mgw'.

5.4. Building with MinGW and MSYS

If the boost directory (e.g. the directory called boost_1_33_0) is in the same
directory as the asio source kit, then you may configure asio by simply going:

  sh configure

in the root directory of the asio source kit. Note that configure will always
use the most recent boost version it knows about (i.e. 1.33.0) in preference to
earlier versions, if there is more than one version present.

If the boost directory is in some other location, then you need to specify this
directory when running configure:

  sh configure --with-boost=<BOOSTDIR>

When specifying the boost directory in this way you should ensure that you use
an absolute path in a UNIX-style format, e.g. `/c/mydir/boost_1_33_0'.

To build, simply run `make' in the root directory of the asio source kit.
