[section:deadline_timer deadline_timer Class]

Provides waitable timer functionality.

[heading Member Functions]
[table
  [
    [Name]
    [Description]
  ]
  [
    [[*[link boost_asio.quick_reference.deadline_timer.cancel cancel]]]
    [Cancels any asynchronous operations that are waiting on the timer.]
  ]
  [
    [[*[link boost_asio.quick_reference.deadline_timer.wait wait]]]
    [Performs a blocking wait on the timer.]
  ]
]

[/-----------------------------------------------------------------------------]
[section:cancel deadline_timer::cancel]

Cancels any asynchronous operations that are waiting on the timer.

  std::size_t cancel()

[heading Return Value]

The member function returns the number of asynchronous operations that were
cancelled.

[heading Remarks]

The handler for each cancelled asynchronous operation will be passed the
error::operation_aborted error code.

Cancelling the timer does not change the expiry time.

[endsect]

[/-----------------------------------------------------------------------------]
[section:deadline_timer deadline_timer::deadline_timer]
[endsect]

[/-----------------------------------------------------------------------------]
[section:expires_at deadline_timer::expires_at]

  std::size_t expires_at(
      const boost::posix_time::ptime& expiry_time
  );

[endsect]

[/-----------------------------------------------------------------------------]
[section:expires_from_now deadline_timer::expires_from_now]

  std::size_t expires_from_now(
      const boost::posix_time::time_duration& expiry_time
  );

[endsect]

[/-----------------------------------------------------------------------------]
[section:wait deadline_timer::wait]

Peforms a blocking wait on the timer.

  void wait();

[endsect]

[/-----------------------------------------------------------------------------]
[section:async_wait deadline_timer::async_wait]

  template <typename Handler>
  void async_wait(
      Handler handler
  );

[endsect]

[endsect]
