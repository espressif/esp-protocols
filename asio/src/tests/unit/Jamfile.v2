import os ;
import feature ;

if [ os.name ] = SOLARIS
{
  lib socket ;
  lib nsl ;
}
else if [ os.name ] = NT
{
  lib ws2_32 ;
  lib mswsock ;
}

local USE_SELECT =
  <define>BOOST_ASIO_DISABLE_EPOLL
  <define>BOOST_ASIO_DISABLE_KQUEUE
  <define>BOOST_ASIO_DISABLE_IOCP
  ;

project
  : requirements
    <library>/boost/date_time//boost_date_time
    <library>/boost/thread//boost_thread
    <define>BOOST_ALL_NO_LIB=1
    <threading>multi
    <os>SOLARIS:<library>socket
    <os>SOLARIS:<library>nsl
    <os>NT<toolset>gcc:<library>ws2_32
    <os>NT<toolset>gcc:<library>mswsock
  ;

test-suite "asio" :
  [ compile basic_datagram_socket_test.cpp ]
  [ compile basic_datagram_socket_test.cpp : $(USE_SELECT) : basic_datagram_socket_test_select ]
  [ compile basic_deadline_timer_test.cpp ]
  [ compile basic_deadline_timer_test.cpp : $(USE_SELECT) : basic_deadline_timer_test_select ]
  [ compile basic_resolver_test.cpp ]
  [ compile basic_resolver_test.cpp : $(USE_SELECT) : basic_resolver_test_select ]
  [ compile basic_socket_acceptor_test.cpp ]
  [ compile basic_socket_acceptor_test.cpp : $(USE_SELECT) : basic_socket_acceptor_test_select ]
  [ compile basic_strand_test.cpp ]
  [ compile basic_strand_test.cpp : $(USE_SELECT) : basic_strand_test_select ]
  [ compile basic_stream_socket_test.cpp ]
  [ compile basic_stream_socket_test.cpp : $(USE_SELECT) : basic_stream_socket_test_select ]
  [ run buffer_test.cpp ]
  [ run buffer_test.cpp : : : $(USE_SELECT) : buffer_test_select ]
  [ run buffered_read_stream_test.cpp ]
  [ run buffered_read_stream_test.cpp : : : $(USE_SELECT) : buffered_read_stream_test_select ]
  [ run buffered_stream_test.cpp ]
  [ run buffered_stream_test.cpp : : : $(USE_SELECT) : buffered_stream_test_select ]
  [ run buffered_write_stream_test.cpp ]
  [ run buffered_write_stream_test.cpp : : : $(USE_SELECT) : buffered_write_stream_test_select ]
  [ compile completion_condition_test.cpp ]
  [ compile completion_condition_test.cpp : $(USE_SELECT) : completion_condition_test_select ]
  [ compile datagram_socket_service_test.cpp ]
  [ compile datagram_socket_service_test.cpp : $(USE_SELECT) : datagram_socket_service_test_select ]
  [ compile deadline_timer_service_test.cpp ]
  [ compile deadline_timer_service_test.cpp : $(USE_SELECT) : deadline_timer_service_test_select ]
  [ run deadline_timer_test.cpp ]
  [ run deadline_timer_test.cpp : : : $(USE_SELECT) : deadline_timer_test_select ]
  [ run error_handler_test.cpp ]
  [ run error_handler_test.cpp : : : $(USE_SELECT) : error_handler_test_select ]
  [ run error_test.cpp ]
  [ run error_test.cpp : : : $(USE_SELECT) : error_test_select ]
  [ run io_service_test.cpp ]
  [ run io_service_test.cpp : : : $(USE_SELECT) : io_service_test_select ]
  [ compile ip/address_test.cpp ]
  [ compile ip/address_test.cpp : $(USE_SELECT) : ip/address_test_select ]
  [ compile ip/address_v4_test.cpp ]
  [ compile ip/address_v4_test.cpp : $(USE_SELECT) : ip/address_v4_test_select ]
  [ compile ip/address_v6_test.cpp ]
  [ compile ip/address_v6_test.cpp : $(USE_SELECT) : ip/address_v6_test_select ]
  [ compile ip/basic_endpoint_test.cpp ]
  [ compile ip/basic_endpoint_test.cpp : $(USE_SELECT) : ip/basic_endpoint_test_select ]
  [ compile ip/basic_resolver_entry_test.cpp ]
  [ compile ip/basic_resolver_entry_test.cpp : $(USE_SELECT) : ip/basic_resolver_entry_test_select ]
  [ compile ip/basic_resolver_iterator_test.cpp ]
  [ compile ip/basic_resolver_iterator_test.cpp : $(USE_SELECT) : ip/basic_resolver_iterator_test_select ]
  [ compile ip/basic_resolver_query_test.cpp ]
  [ compile ip/basic_resolver_query_test.cpp : $(USE_SELECT) : ip/basic_resolver_query_test_select ]
  [ run ip/host_name_test.cpp ]
  [ run ip/host_name_test.cpp : : : $(USE_SELECT) : ip/host_name_test_select ]
  [ compile ip/multicast_test.cpp ]
  [ compile ip/multicast_test.cpp : $(USE_SELECT) : ip/multicast_test_select ]
  [ compile ip/resolver_query_base_test.cpp ]
  [ compile ip/resolver_query_base_test.cpp : $(USE_SELECT) : ip/resolver_query_base_test_select ]
  [ run ip/tcp_test.cpp ]
  [ run ip/tcp_test.cpp : : : $(USE_SELECT) : ip/tcp_test_select ]
  [ run ip/udp_test.cpp ]
  [ run ip/udp_test.cpp : : : $(USE_SELECT) : ip/udp_test_select ]
  [ run is_read_buffered_test.cpp ]
  [ run is_read_buffered_test.cpp : : : $(USE_SELECT) : is_read_buffered_test_select ]
  [ run is_write_buffered_test.cpp ]
  [ run is_write_buffered_test.cpp : : : $(USE_SELECT) : is_write_buffered_test_select ]
  [ compile placeholders_test.cpp ]
  [ compile placeholders_test.cpp : $(USE_SELECT) : placeholders_test_select ]
  [ run read_test.cpp ]
  [ run read_test.cpp : : : $(USE_SELECT) : read_test_select ]
  [ compile resolver_service_test.cpp ]
  [ compile resolver_service_test.cpp : $(USE_SELECT) : resolver_service_test_select ]
  [ compile socket_acceptor_service_test.cpp ]
  [ compile socket_acceptor_service_test.cpp : $(USE_SELECT) : socket_acceptor_service_test_select ]
  [ compile socket_base_test.cpp ]
  [ compile socket_base_test.cpp : $(USE_SELECT) : socket_base_test_select ]
  [ compile strand_service_test.cpp ]
  [ compile strand_service_test.cpp : $(USE_SELECT) : strand_service_test_select ]
  [ run strand_test.cpp ]
  [ run strand_test.cpp : : : $(USE_SELECT) : strand_test_select ]
  [ compile stream_socket_service_test.cpp ]
  [ compile stream_socket_service_test.cpp : $(USE_SELECT) : stream_socket_service_test_select ]
  [ compile time_traits_test.cpp ]
  [ compile time_traits_test.cpp : $(USE_SELECT) : time_traits_test_select ]
  [ run write_test.cpp ]
  [ run write_test.cpp : : : $(USE_SELECT) : write_test_select ]
  ;
