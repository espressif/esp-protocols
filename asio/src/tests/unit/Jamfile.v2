#
# Copyright (c) 2003-2006 Christopher M. Kohlhoff (chris at kohlhoff dot com)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#

import os ;
import feature ;

if [ os.name ] = SOLARIS
{
  lib socket ;
  lib nsl ;
}
else if [ os.name ] = NT
{
  lib ws2_32 ;
  lib mswsock ;
}

local USE_SELECT =
  <define>BOOST_ASIO_DISABLE_EPOLL
  <define>BOOST_ASIO_DISABLE_KQUEUE
  <define>BOOST_ASIO_DISABLE_IOCP
  ;

project
  : requirements
    <library>/boost/date_time//boost_date_time
    <library>/boost/thread//boost_thread
    <define>BOOST_ALL_NO_LIB=1
    <threading>multi
    <os>SOLARIS:<library>socket
    <os>SOLARIS:<library>nsl
    <os>NT<toolset>gcc:<library>ws2_32
    <os>NT<toolset>gcc:<library>mswsock
  ;

test-suite "asio" :
  [ link basic_datagram_socket.cpp ]
  [ link basic_datagram_socket.cpp : $(USE_SELECT) : basic_datagram_socket_select ]
  [ link basic_deadline_timer.cpp ]
  [ link basic_deadline_timer.cpp : $(USE_SELECT) : basic_deadline_timer_select ]
  [ link basic_socket_acceptor.cpp ]
  [ link basic_socket_acceptor.cpp : $(USE_SELECT) : basic_socket_acceptor_select ]
  [ link basic_stream_socket.cpp ]
  [ link basic_stream_socket.cpp : $(USE_SELECT) : basic_stream_socket_select ]
  [ run buffer.cpp ]
  [ run buffer.cpp : : : $(USE_SELECT) : buffer_select ]
  [ run buffered_read_stream.cpp ]
  [ run buffered_read_stream.cpp : : : $(USE_SELECT) : buffered_read_stream_select ]
  [ run buffered_stream.cpp ]
  [ run buffered_stream.cpp : : : $(USE_SELECT) : buffered_stream_select ]
  [ run buffered_write_stream.cpp ]
  [ run buffered_write_stream.cpp : : : $(USE_SELECT) : buffered_write_stream_select ]
  [ link completion_condition.cpp ]
  [ link completion_condition.cpp : $(USE_SELECT) : completion_condition_select ]
  [ link datagram_socket_service.cpp ]
  [ link datagram_socket_service.cpp : $(USE_SELECT) : datagram_socket_service_select ]
  [ link deadline_timer_service.cpp ]
  [ link deadline_timer_service.cpp : $(USE_SELECT) : deadline_timer_service_select ]
  [ run deadline_timer.cpp ]
  [ run deadline_timer.cpp : : : $(USE_SELECT) : deadline_timer_select ]
  [ run error_handler.cpp ]
  [ run error_handler.cpp : : : $(USE_SELECT) : error_handler_select ]
  [ run error.cpp ]
  [ run error.cpp : : : $(USE_SELECT) : error_select ]
  [ run io_service.cpp ]
  [ run io_service.cpp : : : $(USE_SELECT) : io_service_select ]
  [ link ip/address.cpp ]
  [ link ip/address.cpp : $(USE_SELECT) : ip/address_select ]
  [ link ip/address_v4.cpp ]
  [ link ip/address_v4.cpp : $(USE_SELECT) : ip/address_v4_select ]
  [ link ip/address_v6.cpp ]
  [ link ip/address_v6.cpp : $(USE_SELECT) : ip/address_v6_select ]
  [ link ip/basic_endpoint.cpp ]
  [ link ip/basic_endpoint.cpp : $(USE_SELECT) : ip/basic_endpoint_select ]
  [ link ip/basic_resolver.cpp ]
  [ link ip/basic_resolver.cpp : $(USE_SELECT) : ip/basic_resolver_select ]
  [ link ip/basic_resolver_entry.cpp ]
  [ link ip/basic_resolver_entry.cpp : $(USE_SELECT) : ip/basic_resolver_entry_select ]
  [ link ip/basic_resolver_iterator.cpp ]
  [ link ip/basic_resolver_iterator.cpp : $(USE_SELECT) : ip/basic_resolver_iterator_select ]
  [ link ip/basic_resolver_query.cpp ]
  [ link ip/basic_resolver_query.cpp : $(USE_SELECT) : ip/basic_resolver_query_select ]
  [ run ip/host_name.cpp ]
  [ run ip/host_name.cpp : : : $(USE_SELECT) : ip/host_name_select ]
  [ link ip/multicast.cpp ]
  [ link ip/multicast.cpp : $(USE_SELECT) : ip/multicast_select ]
  [ link ip/resolver_query_base.cpp ]
  [ link ip/resolver_query_base.cpp : $(USE_SELECT) : ip/resolver_query_base_select ]
  [ link ip/resolver_service.cpp ]
  [ link ip/resolver_service.cpp : $(USE_SELECT) : ip/resolver_service_select ]
  [ run ip/tcp.cpp ]
  [ run ip/tcp.cpp : : : $(USE_SELECT) : ip/tcp_select ]
  [ run ip/udp.cpp ]
  [ run ip/udp.cpp : : : $(USE_SELECT) : ip/udp_select ]
  [ run is_read_buffered.cpp ]
  [ run is_read_buffered.cpp : : : $(USE_SELECT) : is_read_buffered_select ]
  [ run is_write_buffered.cpp ]
  [ run is_write_buffered.cpp : : : $(USE_SELECT) : is_write_buffered_select ]
  [ link placeholders.cpp ]
  [ link placeholders.cpp : $(USE_SELECT) : placeholders_select ]
  [ run read.cpp ]
  [ run read.cpp : : : $(USE_SELECT) : read_select ]
  [ run read_until.cpp ]
  [ run read_until.cpp : : : $(USE_SELECT) : read_until_select ]
  [ link socket_acceptor_service.cpp ]
  [ link socket_acceptor_service.cpp : $(USE_SELECT) : socket_acceptor_service_select ]
  [ run socket_base.cpp ]
  [ run socket_base.cpp : : : $(USE_SELECT) : socket_base_select ]
  [ run strand.cpp ]
  [ run strand.cpp : : : $(USE_SELECT) : strand_select ]
  [ link stream_socket_service.cpp ]
  [ link stream_socket_service.cpp : $(USE_SELECT) : stream_socket_service_select ]
  [ link time_traits.cpp ]
  [ link time_traits.cpp : $(USE_SELECT) : time_traits_select ]
  [ run write.cpp ]
  [ run write.cpp : : : $(USE_SELECT) : write_select ]
  ;
